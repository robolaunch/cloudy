#include <IBusBM.h>
#include "FastAccelStepper.h"
#define dirPinLeftStepper 14
//#define enablePinLeftStepper 27
#define stepPinLeftStepper 17

// Motor Connections for right stepper
#define dirPinRightStepper 27
//#define enablePinRightStepper 26
#define stepPinRightStepper 25


/*
  Translate iBUS signal to servo - ESP32 version

  This example uses Esp32Servo library (https://github.com/madhephaestus/ESP32Servo) that can be
  downloaded using the Arduino library manager.
  
  Supports ESP32 boards where serial1 is available (most ESP32 boards). 
  Alternatively you can change the code below to use the serial2 port.

  Serial1 port RX/TX connected as follows:
  - RX connected to the iBUS servo pin 
  - TX can be left open as the iBUS protocol for servos is one way only

*/


IBusBM IBus;    // IBus object

#define radianToStep 509.2 
FastAccelStepperEngine engine = FastAccelStepperEngine();
FastAccelStepper *leftStepper = NULL; 
FastAccelStepper *rightStepper = NULL; 
void setup() {
  Serial.begin(115200);     // debug info

  IBus.begin(Serial2,1);    // iBUS object connected to serial2 RX2 pin and use timer 1
  Serial.println("Start IBus2PWM_ESP32");
  engine.init();

  //Configure step pinss
  leftStepper = engine.stepperConnectToPin(stepPinLeftStepper);
  rightStepper = engine.stepperConnectToPin(stepPinRightStepper);

  //Initialize direction pin, enable pin and set acceleration
  if (leftStepper) {
    leftStepper->setDirectionPin(dirPinLeftStepper);
   // leftStepper->setEnablePin(enablePinLeftStepper);
    leftStepper->setAutoEnable(true);
    leftStepper->setAcceleration(16000);
  }

  if(rightStepper){
    rightStepper->setDirectionPin(dirPinRightStepper);
    //rightStepper->setEnablePin(enablePinRightStepper);
    rightStepper->setAutoEnable(true);
    rightStepper->setAcceleration(16000);
  }

}

int saveval=0;

bool arm_check;
void loop() {
  int val;
  int steering = IBus.readChannel(1); // get latest value for servo channel 1
  int driving = IBus.readChannel(3); // get latest value for servo channel 1
  int arm = IBus.readChannel(7);//arm and disarm the rc control

  int demand_x = map(steering,2000,1000,-23,23);
  int demand_z = map(driving,1000,2000,-20,20);
  Serial.println(steering);
  if(arm>1500){
    arm_check = true;
  }
  else{
    arm_check = false;
  }
   if (arm_check){
    float demand_l_speed= demand_x - (demand_z*0.20);
    float demand_r_speed= demand_x + (demand_z*0.20);
    
    leftStepper->setSpeedInHz((uint32_t) (fabs(demand_l_speed) * radianToStep));
    rightStepper->setSpeedInHz((uint32_t) (fabs(demand_r_speed) * radianToStep));
  //Apply the change
  if(demand_l_speed == 0){
    leftStepper->stopMove(); //Stop
  }
  else if(demand_l_speed < 0){
    leftStepper->runBackward(); //For negative values run backwards
  }
  else{
    leftStepper->runForward(); //For positive values run forwards
  }
  if(demand_r_speed == 0){
    rightStepper->stopMove(); //Stop
  }
  else if(demand_r_speed < 0){
    rightStepper->runBackward(); //For negative values run backwards
  }
  else{
    rightStepper->runForward(); //For positive values run forwards
  }

  }
 
  delay(100);
}
